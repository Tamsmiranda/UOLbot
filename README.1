.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.10)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "UOL::bot 3"
.TH UOL::bot 3 "2010-08-01" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NOME"
.IX Header "NOME"
UOLbot \- interface Perl para bate-papo do \s-1UOL\s0
.SH "PLATAFORMAS SUPORTADOS"
.IX Header "PLATAFORMAS SUPORTADOS"
Teoricamente, \fBtodos\fR onde roda o perl. Oficialmente, foi testado em:
.IP "\(bu" 4
Linux
(perl 5.6.1)
.IP "\(bu" 4
Windows
(ActivePerl 5.6.1 Build 632)
.SH "RESUMO"
.IX Header "RESUMO"
.Vb 2
\&  #!/usr/bin/perl
\&  use UOLbot;
\&
\&  my $bot = new UOLbot (Nick => \*(Aquolbot\*(Aq);
\&
\&  $bot\->login (\*(Aqbatepapo4.uol.com.br:3999\*(Aq);
\&  $bot\->send ("Hello World!");
\&  $bot\->logout;
\&
\&  exit;
.Ve
.SH "DESCRIC\*,A\*~O"
.IX Header "DESCRIC,A~O"
O \f(CW\*(C`UOLbot\*(C'\fR e\*' um mo\*'dulo Perl que implementa interface para webchat (batepapo) do
\&\s-1UOL\s0 (http://www.uol.com.br/). Basicamente, a ide\*'ia e\*' poder acessar as func\*,o\*~es
comunicativas do chat \fBde fora\fR do navegador. No caso, a\*` partir de um programa
escrito em Perl. Um detalhe em destaque: a intenc\*,a\*~o e\*' implementar interface
\&\fBcompleta\fR. Por exemplo, clientes tais como Jane, \s-1UOLME\s0 e Chat\-No\*'ia 666
implementam so\*' um pouco a\*` mais do que parte interativa. \*(L"O grosso\*(R" do trabalho
em tais clientes e\*' feito pelas DLLs do \f(CW\*(C`Internet Explorer\*(C'\fR. Ja\*' o \f(CW\*(C`UOLbot\*(C'\fR e\*'
independente de \f(CW\*(C`Internet Explorer\*(C'\fR assim como e\*' independente do \f(CW\*(C`Windows\*(C'\fR
como todo.
.PP
Enta\*~o, conforme o pro\*'prio nome diz, voce\*^ pode escrever bots de propaganda
(robo\*^s de propaganda que andam de sala em sala enchendo o saco das pessoas)
utilizando \f(CW\*(C`UOLbot\*(C'\fR. Voce\*^ tambe\*'m pode fazer algo u\*'til como o primeiro cliente
de batepapo \s-1UOL\s0 que seja \fIcross-platform\fR. Fiz de tudo para tais tarefas sejam
mais simplificadas possi\*'veis, apenas repare no exemplo acima ;)
.PP
Bom, qualquer coisa, esse projeto esta\*' \fIquase\fR sempre em expansa\*~o. Comecei
aplicando uma engenharia reversa para saber como o
\&\fIMicrosoft Internet Explorer 6.0\fR interage com servidores do \s-1UOL\s0
(sim, a lo\*'gica de operac\*,a\*~o e\*' do \s-1IE\s0 do comec\*,o ao fim), e atualmente
tenho em ma\*~os um mo\*'dulo orientado a\*` objetos (hi\*'brido, para ser honesto) que
faz virtualmente tudo o que \fBvoce\*^\fR faria num webchat.
.PP
\&\fIObs\fR: antes que me pergunte, "eu estou lendo em portugue\*^s aqui,
enta\*~o por que \f(CW\*(C`send\*(C'\fR e na\*~o \fIenviar\fR, ou \f(CW\*(C`logout\*(C'\fR ao inve\*'s de \fIsair\fR?\*(L"
A raza\*~o e\*' simples: o \*(R"resto" do perl esta\*' em ingle\*^s, certo?
Por mim, fica estranho ler e entender o que faz algo como
.PP
.Vb 1
\&  next if $bot\->enviar and not scalar $bot\->usuarios;
.Ve
.SH "INTRODUC\*,A\*~O"
.IX Header "INTRODUC,A~O"
Agora, o princi\*'pio ativo. Antes de tudo, voce\*^ deve criar uma insta\*^ncia
do bot:
.PP
.Vb 1
\&  my $bot = new UOLbot (Nick => \*(Aquolbot\*(Aq);
.Ve
.PP
O para\*^metro \fINick\fR especifica o nickname do bot.
Voce\*^ pode passar outros, que sera\*~o descritos posteriormente.
Voce\*^ tambe\*'m pode \fBna\*~o\fR passar nenhum, ai\*' o seu bot sera\*' um
discreto \*(L"unnamed\*(R".
Voce\*^ pode ter va\*'rias insta\*^ncias, so\*' na\*~o sei qual o sentido
disso. Va\*'rios robo\*^s para va\*'rias salas em um so\*' programa?
.PP
Pronto, voce\*^ criou o seu bot... E agora? Ele deve entrar numa sala, ne\*'?
.PP
.Vb 1
\&  $bot\->login (\*(Aqbatepapo4.uol.com.br:3999\*(Aq);
.Ve
.PP
(o\*'tima sala para propaganda, eheheh)
Ai\*' voce\*^ passa a \s-1URL\s0 da sala. E\*' o u\*'nico para\*^metro \fBnecessa\*'rio\fR.
E\*' claro que ter que saber essa \s-1URL\s0 e\*' um pe\*' no saco, voce\*^ pode entrar na
sala so\*' sabendo o seu nome/nu\*'mero. Mas isso e\*' para depois.
.PP
Opa, mas espere um pouco. Voce\*^ ja\*' deve ter percebido aqueles co\*'digos de
verificac\*,a\*~o anti-spam, ne\*' (antes na\*~o existia isso na\*~o)... O que fazer
agora? \fB\s-1NADA\s0\fR. Lhes apresento orgulhosamente o \f(CW\*(C`UOL::OCR\*(C'\fR!!! E\*' um
sub-componente composto por filtros digitais de imagem e um programa de
\&\s-1OCR\s0 (\fIOptical Character Recognition\fR), atualmente o \f(CW\*(C`jocr\*(C'\fR
(http://jocr.sourceforge.net). Tal componente trata dos co\*'digos de verificac\*,a\*~o
para voce\*^, e aparentemente muito bem ;)
.PP
Bom, e estando na sala, o que fazer? Falar!
.PP
.Vb 1
\&  $bot\->send ("Hello World!");
.Ve
.PP
\&\*(L"Oi mundo\*(R" \f(CW\*(C`:P\*(C'\fR
Sem comenta\*'rios aqui.
.PP
Quando voce\*^ \*(L"falou\*(R" tudo o que quis, tchau para todos!
.PP
.Vb 1
\&  $bot\->logout;
.Ve
.PP
Isso e\*' o ba\*'sico. Se na\*~o entendeu, pare por aqui.
.SH "REQUISITOS"
.IX Header "REQUISITOS"
.IP "\(bu" 4
\&\s-1LWP\s0 \- The World-Wide Web library for Perl (libwww-perl)
.IP "\(bu" 4
Image::Magick \fI(opcional)\fR
.SH "CONSTRUTOR"
.IX Header "CONSTRUTOR"
.ie n .IP """new ([ARGS])""" 4
.el .IP "\f(CWnew ([ARGS])\fR" 4
.IX Item "new ([ARGS])"
Construtor para o bot. Retorna a refere\*^ncia para objeto \f(CW\*(C`UOL::bot\*(C'\fR.
Argumentos \f(CW\*(C`ARGS\*(C'\fR devem ser passados em forma:
.Sp
.Vb 2
\&  new (Chave1 => \*(Aqvalor1\*(Aq,
\&       Chave2 => 2);
.Ve
.Sp
Note que alguns dos argumentos voce\*^ podera\*' alterar posteriormente
com me\*'todos apropriados, e outros na\*~o.
Argumentos va\*'lidos (\fBtodos\fR opcionais):
.RS 4
.IP "\fI\s-1UA\s0\fR" 4
.IX Item "UA"
refere\*^ncia para objeto \f(CW\*(C`LWP::UserAgent\*(C'\fR externo (e\*' criada insta\*^ncia interna por default)
.IP "\fINick\fR" 4
.IX Item "Nick"
o nickname (valor default e\*' \fI\*(L"unnamed\*(R"\fR)
.IP "\fIColor\fR" 4
.IX Item "Color"
a cor do nickname (valor default e\*' \fI0\fR)
.Sp
\&\fIObs\fR: valores possi\*'veis sa\*~o:
.Sp
.Vb 7
\&  0 \- Preto
\&  1 \- Vermelho
\&  2 \- Verde
\&  3 \- Azul
\&  4 \- Laranja
\&  5 \- Cinza
\&  6 \- Roxo
.Ve
.IP "\fIAvatar\fR" 4
.IX Item "Avatar"
define \*(L"carinha\*(R" na frente do nick (nu\*'mero inteiro, para ser descoberto na tentativa e erro :(
.Sp
\&\fIObs\fR: a \*(L"carinha\*(R" so\*' vai aparecer se voce\*^ for autenticado com \f(CW\*(C`auth\*(C'\fR!
.Sp
\&\fIObs2\fR: pra tirar a \*(L"carinha\*(R" ja\*' definida, chame \f(CW\*(C`$bot\->avatar (\-1)\*(C'\fR.
.IP "\fIFast\fR" 4
.IX Item "Fast"
se setado em \fI1\fR faz \f(CW\*(C`UOLbot\*(C'\fR pular passos desnecessa\*'rios de autenticac\*,a\*~o/login na sala.
Pode fazer diferenc\*,a em conexo\*~es lentas, pore\*'m pode gerar incompatibilidades, cuidado ao
usar!
.IP "\fITries\fR" 4
.IX Item "Tries"
nu\*'mero de tentativas para processar/reentrar co\*'digo de verificac\*,a\*~o. Tenha em mente que o
\&\fI\s-1OCR\s0\fR embutido pode errar para algum tipo de fonte/fundo/texto, pore\*'m quem sabe se na
pro\*'xima ele acerta? Default e\*' \fI3\fR.
.IP "\fIAuth_Magic\fR" 4
.IX Item "Auth_Magic"
preconfigura o \fIcookie ma\*'gico\fR que \s-1UOL\s0 utiliza para saber se o usua\*'rio e\*' registrado.
Uma boa ide\*'ia e\*' na\*~o tocar nisso, se quiser experimentar, primeiro de\*^ um \f(CW\*(C`auth\*(C'\fR com
login/senha va\*'lidos, depois de\*^ um
.Sp
.Vb 1
\&  print $bot\->auth_magic, "\en";
.Ve
.Sp
depois copie o que for impresso e cole no
.Sp
.Vb 1
\&  my $bot = new UOLbot (Auth_Magic => ...);
.Ve
.IP "\fIImgCode_Handler\fR" 4
.IX Item "ImgCode_Handler"
refere\*^ncia para a rotina que vai processar a imagem com co\*'digo de verificac\*,a\*~o.
A minha sugesta\*~o e\*' que voce\*^ na\*~o toque nisso. O default e\*' tentar carregar um
\&\fI\s-1OCR\s0\fR aqui, se falhar, enta\*~o a \s-1URL\s0 da imagem com co\*'digo de verificac\*,a\*~o e\*' impressa
e voce\*^ (usua\*'rio) tem que ler/digitar... Argh. De qualquer forma, a sintaxe e\*':
.Sp
.Vb 10
\&  ImgCode_Handler => \e&my_imgcode_handler
\&  ...
\&  sub my_imgcode_handler {
\&     my ($req, $ua) = @_;
\&     # $req e\*' ista\*^ncia HTTP::Request
\&     # $ua e\*' insta\*^ncia LWP::UserAgent
\&     my $resp = $ua\->request ($req);
\&     ...
\&     return $code;
\&  }
.Ve
.Sp
No caso:
.Sp
\&\fI\f(CI$req\fI\fR e\*' insta\*^ncia \f(CW\*(C`HTTP::Request\*(C'\fR da imagem\-co\*'digo
\&\fI\f(CI$ua\fI\fR e\*' insta\*^ncia \f(CW\*(C`LWP::UserAgent\*(C'\fR atualmente usada pelo \f(CW\*(C`UOLbot\*(C'\fR
\&\fI\f(CI$code\fI\fR e\*' co\*'digo de 4 caracteres [a\-z0\-9]
.IP "\fIListen_Handler\fR" 4
.IX Item "Listen_Handler"
refere\*^ncia para a rotina que vai processar as
informac\*,o\*~es recebidas da sala (indefinido por default).
Por exemplo:
.Sp
.Vb 1
\&  Listen_Handler => sub { print $_[0] }
.Ve
.Sp
imprime qualquer coisa recebida e
.Sp
.Vb 7
\&  Listen_Handler => \e&listen_handler
\&  ...
\&  sub listen_handler {
\&     my $data = shift;
\&     ...
\&     return;
\&  }
.Ve
.Sp
define a sub-rotina \fIlisten_handler\fR como handler de 'escuta'.
Nesse caso, varia\*'vel \fI\f(CI$data\fI\fR recebe pacotes com co\*'digo \s-1HTML\s0 recebidos.
.Sp
\&\fIObs\fR: lembre que nem sempre ha\*' uma mensagem em um pacote. O servidor
(ou buffer do sistema operacional) pode juntar va\*'rios pacotes num so\*'.
.RE
.RS 4
.RE
.SH "ME\*'TODOS"
.IX Header "ME'TODOS"
Os me\*'todos do \f(CW\*(C`UOLbot\*(C'\fR sa\*~o:
.ie n .IP """ua""" 4
.el .IP "\f(CWua\fR" 4
.IX Item "ua"
.PD 0
.ie n .IP """nick""" 4
.el .IP "\f(CWnick\fR" 4
.IX Item "nick"
.ie n .IP """color""" 4
.el .IP "\f(CWcolor\fR" 4
.IX Item "color"
.ie n .IP """avatar""" 4
.el .IP "\f(CWavatar\fR" 4
.IX Item "avatar"
.ie n .IP """fast""" 4
.el .IP "\f(CWfast\fR" 4
.IX Item "fast"
.ie n .IP """tries""" 4
.el .IP "\f(CWtries\fR" 4
.IX Item "tries"
.ie n .IP """auth_magic""" 4
.el .IP "\f(CWauth_magic\fR" 4
.IX Item "auth_magic"
.ie n .IP """imgcode_handler""" 4
.el .IP "\f(CWimgcode_handler\fR" 4
.IX Item "imgcode_handler"
.ie n .IP """listen_handler""" 4
.el .IP "\f(CWlisten_handler\fR" 4
.IX Item "listen_handler"
.PD
Me\*'todos para ler/definir os para\*^metros definidos pelo \f(CW\*(C`new\*(C'\fR.
.Sp
\&\fIObs\fR: Voce\*^ pode ler os valores a qualquer momento, mas so\*' podera\*'
definir quando a insta\*^ncia \fIna\*~o estiver logada\fR com \f(CW\*(C`login\*(C'\fR!
.ie n .IP """list_subgrp (SUBGRP)""" 4
.el .IP "\f(CWlist_subgrp (SUBGRP)\fR" 4
.IX Item "list_subgrp (SUBGRP)"
Enumera as salas de bate-papo de um sub-grupo \f(CW\*(C`SUBGRP\*(C'\fR. O tal sub-grupo
e\*' o documento onde nomes das salas, suas URLs e suas lotac\*,o\*~es sa\*~o fornecidos.
\&\f(CW\*(C`list_subgrp\*(C'\fR e\*' simplesmente uma interface para esse documento.
Para\*^metro \f(CW\*(C`SUBGRP\*(C'\fR e\*' uma string com \s-1URL\s0 de formato
\&\fI'http://batepapo.uol.com.br/bp/excgi/salas_new.cgi?ID=idim_he.conf'\fR
ou enta\*~o simplesmente \fI'idim_he.conf'\fR. Os dois sa\*~o equivalentes.
Quando voce\*^ usa \f(CW\*(C`list_subgrp\*(C'\fR antes de \f(CW\*(C`login\*(C'\fR, \f(CW\*(C`SUBGRP\*(C'\fR e\*' salvo e
utilizado como \f(CW\*(C`REF\*(C'\fR de \f(CW\*(C`login\*(C'\fR automaticamente. O me\*'todo retorna
um array de hashes se tiver sucesso e \fI()\fR se houver falha. O array
retornado pode ser expandido com:
.Sp
.Vb 6
\&  my @room = $bot\->list_subgrp (\*(Aqidim_he.conf\*(Aq);
\&  foreach $room (@room) {
\&     print $room\->{URL}, "\en",
\&           $room\->{Title}, "\en",
\&           $room\->{Load}, "\en\en";
\&  }
.Ve
.Sp
onde \f(CW\*(C`URL\*(C'\fR e\*' a \s-1URL\s0 da sala de bate-papo, \f(CW\*(C`Title\*(C'\fR e\*' o ti\*'tulo dela e
\&\f(CW\*(C`Load\*(C'\fR e\*' o nu\*'mero de pessoas na sala
(0\-40, \-1 significa \fI\*(L"sala lotada\*(R"\fR).
.ie n .IP """search (STRING)""" 4
.el .IP "\f(CWsearch (STRING)\fR" 4
.IX Item "search (STRING)"
Busca por usua\*'rio com \f(CW\*(C`STRING\*(C'\fR contido no nickname em \fBtodas\fR as salas. Retorna \fI()\fR caso
nenhum seja encontrado ou \fIarray\fR semelhante ao do \f(CW\*(C`list_subgrp\*(C'\fR:
.Sp
.Vb 7
\&  my @room = $bot\->search (\*(Aquolbot\*(Aq);
\&  foreach $room (@room) {
\&     print $room\->{Nick}, "\en",
\&           $room\->{URL}, "\en",
\&           $room\->{Title}, "\en",
\&           $room\->{Load}, "\en\en";
\&  }
.Ve
.Sp
Onde \fINick\fR refere o nickname completo do usua\*'rio encontrado, \fI\s-1URL\s0\fR e\*' o enderec\*,o da sala onde
o usua\*'rio atualmente se encontra, \fITitle\fR e\*' o ti\*'tulo da mesma (cortado, foi mal) e \fILoad\fR e\*'
quantidade de pessoas presentes na mesma sala.
.ie n .IP """brief (ROOM)""" 4
.el .IP "\f(CWbrief (ROOM)\fR" 4
.IX Item "brief (ROOM)"
\&\*(L"Espia\*(R" na sala sem entrar nela. Retorna \fI0\fR se falha. Caso tiver sucesso,
.RS 4
.IP "1." 4
guarda a lista com nomes de usua\*'rios para depois ser vista com \f(CW\*(C`users\*(C'\fR
.IP "2." 4
passa o fragmento da conversa para rotina definida em \f(CW\*(C`Listen_Handler\*(C'\fR
.IP "3." 4
retorna \fI1\fR
.RE
.RS 4
.RE
.ie n .IP """auth ([USER, PASS])""" 4
.el .IP "\f(CWauth ([USER, PASS])\fR" 4
.IX Item "auth ([USER, PASS])"
Autentica usua\*'rio registrado. Permite entrar nas salas com mais de 30 pessoas e usar
\&\*(L"carinha\*(R" na frente do nick. \f(CW\*(C`USER\*(C'\fR e\*' o nome de usua\*'rio em forma \fI'nome@uol.com.br'\fR
e \f(CW\*(C`PASS\*(C'\fR e\*' a senha. Agora, o mais velho \fIhack\fR de sistema de chat... Omita \f(CW\*(C`USER\*(C'\fR
e \f(CW\*(C`PASS\*(C'\fR e tera\*'s todos os privile\*'gios de um usua\*'rio registrado sem ser um ;)
.Sp
Retorna \fI0\fR se houver falha (username/senha inva\*'lidos) e \fI1\fR se tiver sucesso.
.Sp
\&\fIObs\fR: voce\*^ deve autenticar \fBantes\fR de efetuar \f(CW\*(C`login\*(C'\fR!
.Sp
\&\fIObs2\fR: \f(CW\*(C`auth\*(C'\fR utiliza conexa\*~o encriptada via \s-1SSL\s0 automaticamente quando o mo\*'dulo
\&\f(CW\*(C`Crypt::SSLeay\*(C'\fR e\*' encontrado no sistema. Sem esse mo\*'dulo, a conexa\*~o efetuada e\*'
insegura e a senha pode ser vista por pessoas mal-intencionadas! Duvido muito,
mas o que custa fazer direito?!
.ie n .IP """login (ROOM [, REF])""" 4
.el .IP "\f(CWlogin (ROOM [, REF])\fR" 4
.IX Item "login (ROOM [, REF])"
Efetua \fIlogin\fR na sala \f(CW\*(C`ROOM\*(C'\fR de bate-papo. Chama internamente \fIimgcode_handler\fR.
Para\*^metro \f(CW\*(C`ROOM\*(C'\fR consiste de uma string de formato \f(CW"http://batepapo4.uol.com.br:3999/"\fR.
Se voce\*^ for preguic\*,oso como eu, pode usar \f(CW"batepapo4.uol.com.br:3999"\fR apenas. Para\*^metro
\&\f(CW\*(C`REF\*(C'\fR, opcional, e\*' o \fIReferer\fR, o documento que continha o link para
\&\f(CW\*(C`ROOM\*(C'\fR. Se voce\*^ omitir o \f(CW\*(C`REF\*(C'\fR, valor
\&\fI'http://batepapo.uol.com.br/bp/excgi/salas_new.shl'\fR
sera\*' usado automaticamente. Se voce\*^ estiver usado \f(CW\*(C`list_subgrp\*(C'\fR ou \f(CW\*(C`search\*(C'\fR antes
de \f(CW\*(C`login\*(C'\fR, a \s-1URL\s0 de sub-grupo listado sera\*' usada como \f(CW\*(C`REF\*(C'\fR.
Leia mais sobre \f(CW\*(C`list_subgrp\*(C'\fR/\f(CW\*(C`search\*(C'\fR.
.Sp
Retorna \fI0\fR se houver falha e \fI1\fR se tiver sucesso. A \*(L"falha\*(R" mais prova\*'vel
e\*' que a sala esteja cheia. Utilize o \f(CW\*(C`login_error\*(C'\fR para obter mais detalhes
sobre a falha ocorrida.
.ie n .IP """is_logged""" 4
.el .IP "\f(CWis_logged\fR" 4
.IX Item "is_logged"
Retorna \fIna\*~o\-0\fR se o bot estiver atualmente numa sala de bate-papo e \fI0\fR caso contra\*'rio.
.Sp
\&\fIDetalhes Te\*'cnicos\fR: Para ser exato, retorna o nu\*'mero de tentativas de efetuar a verificac\*,a\*~o.
.ie n .IP """encode""" 4
.el .IP "\f(CWencode\fR" 4
.IX Item "encode"
Retorna a parte \*(L"encriptada\*(R" da \s-1URL\s0 da u\*'ltima imagem processada contendo co\*'digo de verificac\*,a\*~o.
.ie n .IP """decode""" 4
.el .IP "\f(CWdecode\fR" 4
.IX Item "decode"
Retorna o co\*'digo lido.
.ie n .IP """is_auth""" 4
.el .IP "\f(CWis_auth\fR" 4
.IX Item "is_auth"
Retorna \fI1\fR se o bot estiver autenticado como usua\*'rio registrado do \s-1UOL\s0.
.ie n .IP """login_error""" 4
.el .IP "\f(CWlogin_error\fR" 4
.IX Item "login_error"
Retorna o co\*'digo do erro durante login:
.Sp
.Vb 5
\&  0     \- sucesso
\&  1     \- nickname ja\*' foi utilizado
\&  2     \- sala esta\*' cheia
\&  3     \- co\*'digo de verificac\*,a\*~o incorreto
\&  undef \- erro desconhecido (ver valor de $!)
.Ve
.ie n .IP """users""" 4
.el .IP "\f(CWusers\fR" 4
.IX Item "users"
Retorna array de nicknames de usua\*'rios atualmente presentes na sala
de bate-papo. Os dados sa\*~o atualizados toda vez que voce\*^ efetua \f(CW\*(C`login\*(C'\fR,
\&\f(CW\*(C`send\*(C'\fR ou \f(CW\*(C`brief\*(C'\fR. Desculpe, na\*~o fui eu quem inventou isso... Retorna no mi\*'nimo
o pro\*'prio nickname (a sala na\*~o esta\*' vazia se \fIvoce\*^\fR esta\*' la\*' \f(CW\*(C`;)\*(C'\fR ou \fI()\fR
no caso de falha. Detalhe: se voce\*^ usou \f(CW\*(C`brief\*(C'\fR, a sala \fBpode\fR estar vazia
portando \fI()\fR \fBna\*~o\fR significa erro.
.ie n .IP """send ([MSG] [, ATTR])""" 4
.el .IP "\f(CWsend ([MSG] [, ATTR])\fR" 4
.IX Item "send ([MSG] [, ATTR])"
Envia mensagem \f(CW\*(C`MSG\*(C'\fR para sala de bate-papo. Possui 4 sintaxes:
.RS 4
.IP "1." 4
.Vb 1
\& $bot\->send (\*(Aqmensagem 1\*(Aq);
.Ve
.Sp
a mais simples, envia string \fI'mensagem 1'\fR
.IP "2." 4
.Vb 1
\& $bot\->send (\*(Aqmensagem 2\*(Aq, To => \*(AqTODOS\*(Aq, Action => 15);
.Ve
.Sp
envia string \fI'mensagem 2'\fR com atributos \f(CW\*(C`To\*(C'\fR e \f(CW\*(C`Action\*(C'\fR explicados abaixo
.IP "3." 4
.Vb 1
\& $bot\->send (Msg => \*(Aqmensagem 3\*(Aq, To => \*(AqTODOS\*(Aq, Action => 15);
.Ve
.Sp
o mesmo de cima para \fI'mensagem 3'\fR
.IP "4." 4
.Vb 1
\& $bot\->send ();
.Ve
.Sp
sintaxe mais obscura, na\*~o envia \fBnada\fR, apenas atualiza a lista que
pode ser obtida com me\*'todo \f(CW\*(C`users\*(C'\fR. De novo, na\*~o fui eu quem inventou!
.RE
.RS 4
.Sp
Agora, sobre atributos \f(CW\*(C`ATTR\*(C'\fR. Sa\*~o todos opcionais
(forma \f(CW\*(C`Chave => \*(AqValor\*(Aq\*(C'\fR), aqui esta\*' a lista
com uma breve explicac\*,a\*~o:
.IP "\fIMsg\fR" 4
.IX Item "Msg"
a mensagem em si, string (so\*' pode ser usado com \fIsintaxe 3\fR, ignorado na \fIsintaxe 2\fR!)
.IP "\fIAction\fR" 4
.IX Item "Action"
ac\*,a\*~o, valor inteiro. Ac\*,o\*~es possi\*'veis:
.Sp
.Vb 10
\&  0  \- fala para (default)
\&  1  \- pergunta para
\&  2  \- responde para
\&  3  \- concorda com
\&  4  \- discorda de
\&  5  \- desculpa\-se com
\&  6  \- surpreende\-se com
\&  7  \- murmura para
\&  8  \- sorri para
\&  9  \- suspira por
\&  10 \- flerta com
\&  11 \- entusiasma\-se com
\&  12 \- ri de
\&  13 \- da\*' um fora em
\&  14 \- briga com
\&  15 \- grita com
\&  16 \- xinga
\&
\&  18 \- IGNORAR mensagens de
\&  19 \- so\*' receber mensagens de
\&  20 \- na\*~o IGNORAR mais
.Ve
.IP "\fITo\fR" 4
.IX Item "To"
o nickname do receptor da ac\*,a\*~o \fIAction\fR, string. Valor default e\*' \fI'\s-1TODOS\s0'\fR.
.Sp
\&\fIObs1\fR: \fBna\*~o necessariamente\fR e\*' algue\*'m que esteja na sala. Isto e\*', voce\*^
pode fazer:
.Sp
.Vb 1
\&  $bot\->send (\*(Aqbots do UOL, uni\*'\-vos!\*(Aq, To => \*(Aqbots renegados\*(Aq);
.Ve
.Sp
\&\fBdesde que\fR \fIna\*~o\fR seja uma mensagem reservada (\f(CW\*(C`Reserved => 1\*(C'\fR)!
.Sp
\&\fIObs2\fR: independentemente do valor do \fITo\fR, todos os usua\*'rios da sala
ira\*~o ler a mensagem. Para mensagens privadas, use \fIReserved\fR.
.IP "\fIReserved\fR" 4
.IX Item "Reserved"
pode ser \fI1\fR ou \fI0\fR. Quando \fI1\fR, a mensagem e\*' enviada reservadamente
para nickname \fITo\fR. Valor default e\*' \fI0\fR.
.IP "\fISound\fR" 4
.IX Item "Sound"
som a ser enviado, inteiro. Sons possi\*'veis:
.Sp
.Vb 10
\&  0  \- nenhum (default)
\&  14 \- Ahn???
\&  15 \- Bang!
\&  16 \- Banjo
\&  17 \- Dinossauro
\&  18 \- Fiu\-fiu
\&  19 \- Ocupado
\&  20 \- Oinc
\&  21 \- Pigarro
\&  22 \- Smack!
\&  23 \- Susto
\&  24 \- Telefone
\&  25 \- To\*^lo\*^ca
\&  26 \- Tosse
\&  07 \- Como e\*'?
\&  08 \- Na\*~o entendi
.Ve
.IP "\fIIcon\fR" 4
.IX Item "Icon"
i\*'cone a ser enviado, inteiro. I\*'cones possi\*'veis:
.Sp
.Vb 10
\&  0  \- nenhum (default)
\&  38 \- Assustado
\&  27 \- Bocejo
\&  23 \- Careta
\&  30 \- Dentuc\*,o
\&  18 \- Desejo
\&  31 \- Eca !
\&  32 \- Gargalhada
\&  33 \- Indeciso
\&  34 \- Louco
\&  28 \- Na praia
\&  35 \- Ohhh !
\&  20 \- OK!
\&  36 \- Piscada
\&  37 \- Raiva
\&  19 \- Smack!
\&  21 \- Sorriso
\&  26 \- Zangado
.Ve
.RE
.RS 4
.Sp
Retorna \fI0\fR se houver falha e \fI1\fR se tiver sucesso.
.Sp
\&\fIObs\fR: \fBaparentemente\fR o servidor na\*~o aceita mensagens > 200 bytes.
.RE
.ie n .IP """scroll (TIMEOUT)""" 4
.el .IP "\f(CWscroll (TIMEOUT)\fR" 4
.IX Item "scroll (TIMEOUT)"
\&\fIObs\fR: Provavelmente a parte mais chatinha... Mas indispensa\*'vel se voce\*^
quer comunicac\*,a\*~o \fBbidirecional\fR, isto e\*', o seu bot envia \fBE\fR recebe dados.
.Sp
O \f(CW\*(C`scroll\*(C'\fR visa limpar buffers de entrada e enviar dados para sub-rotina
definida em \f(CW\*(C`Listen_Handler\*(C'\fR (leia mais sobre argumentos de \f(CW\*(C`new\*(C'\fR). Se o
\&\fIlisten_handler\fR for omitido enta\*~o os buffers sera\*~o limpos e a rotina
retornara\*' sucesso (\fI1\fR). So\*' retorna \fI0\fR se houver quebra inesperada
de conexa\*~o.
.Sp
O para\*^metro \f(CW\*(C`TIMEOUT\*(C'\fR e\*' o tempo que o \f(CW\*(C`scroll\*(C'\fR deva esperar ate\*'
retornar caso o buffer esteja vazio, em segundos. Resumindo,
\&\f(CW\*(C`scroll()\*(C'\fR ou \f(CWscroll(0)\fR retorna imediatamente (timeout 0).
\&\f(CW\*(C`scroll(10)\*(C'\fR aguarda 10 segundos pelo dado. \f(CW\*(C`scroll(\-1)\*(C'\fR pausa o programa
ate\*' que um dado aparec\*,a no buffer.
.Sp
O \f(CW\*(C`scroll\*(C'\fR e\*' chamado automaticamente pelos me\*'todos \f(CW\*(C`login\*(C'\fR, \f(CW\*(C`logout\*(C'\fR
e \f(CW\*(C`send\*(C'\fR, portando, na\*~o ha\*' como o seu \f(CW\*(C`Listen_Handler\*(C'\fR perder algum dado.
Pore\*'m, se voce\*^ quiser mais controle, rode um \f(CW\*(C`scroll\*(C'\fR com \fItimeout\fR
razoa\*'vel sempre que estiver esperando alguma resposta do servidor.
.Sp
\&\fIObs\fR: Algue\*'m ai\*' pensou fork? Acredite em mim, \fBna\*~o\fR vale a pena!
Eu \fIcomecei\fR a desenvolver bot bifurcado, com um \fIchild\fR para entrada
(rodando so\*' \f(CW\*(C`while ($bot\->scroll(\-1)) { ... }\*(C'\fR) e outro para sai\*'da
(rodando \f(CW\*(C`$bot\->send(...)\*(C'\fR). A sincronizac\*,a\*~o dos dois virou um inferno e o
ActivePerl, meu plataforma principal, na\*~o era muito amigo do fork.
Se voce\*^ pensar um pouco, vera\*' que o problema em questa\*~o e\*' totalmente
linear, nunca duas ac\*,o\*~es sa\*~o feitas em paralelo. Agora, se voce\*^ estiver
usando plataforma \s-1UNIX\s0 e na\*~o quiser se preocupar onde po\*^r o \f(CW\*(C`scroll\*(C'\fR,
coloque antes do \f(CW\*(C`login\*(C'\fR:
.Sp
.Vb 2
\&  $SIG{ALRM} = sub { $bot\->scroll; alarm 1 };
\&  alarm 1;
.Ve
.Sp
Se voce\*^ esta\*' vendo essa te\*'cnica pela 1\-a vez, conforme-se com o que ja\*' tem.
.ie n .IP """logout""" 4
.el .IP "\f(CWlogout\fR" 4
.IX Item "logout"
Efetua \fIlogout\fR da sala de bate-papo. Retorna \fI0\fR se houver falha e
\&\fI1\fR se tiver sucesso.
.SH "BUGS"
.IX Header "BUGS"
Testei rigorosamente esse mo\*'dulo, afinal por que a ide\*'ia e\*' que um \fBbot\fR
rode 24 horas por dia 7 dias por semana \fIsem manutenc\*,a\*~o\fR.
.PP
Pore\*'m sempre ha\*' coisas que na\*~o planejamos afinal, tais como:
.IP "\(bu" 4
organizac\*,a\*~o estranha de mo\*'dulos/me\*'todos
.Sp
E\*' resultado dificilmente evita\*'vel do progresso do \f(CW\*(C`UOLbot\*(C'\fR. Comec\*,a\-se
de um jeito, ai\*' muda-se de ide\*'ia e termina de um jeito totalmente diferente.
Com certeza voce\*^ deve estar se perguntando algo do tipo: "mas para que\*^ dar
um \fInick\fR a\*` insta\*^ncia que vai apenas checkar a sala?\*(L" ou enta\*~o: \*(R"na\*~o seria
mais fa\*'cil encapsular o enderec\*,o da sala em \f(CW\*(C`HTTP::Request\*(C'\fR por exemplo, 
afinal vira e mexe aparece \s-1URL\s0 de um jeito ou de outro!". A pergunta e\*':
a \fBfuncionalidade\fR e\*' prejudicada? Caso contra\*'rio, para que perder tempo
arrumando coisa insignificante, afinal, na\*~o e\*' um co\*'digo \fBpara massas\fR ;)
.IP "\(bu" 4
incompatibilidade com \f(CW\*(C`Win32\*(C'\fR
.Sp
Calma, calma, voce\*^ \fBpode\fR executar o \f(CW\*(C`UOLbot\*(C'\fR num plataforma \f(CW\*(C`Win32\*(C'\fR.
O grande inconveniente e\*' eu na\*~o ter o \fIport\fR do \f(CW\*(C`jocr\*(C'\fR necessa\*'rio e
biblioteca \f(CW\*(C`Image::Magick\*(C'\fR para testar func\*,o\*~es \fI\s-1OCR\s0\fR...
Alia\*'s, vi que \fIas vezes\fR ha\*' falhas muito estranhas no \f(CW\*(C`LWP\*(C'\fR. Uma hora
ta\*' tudo \s-1OK\s0, outra hora na\*~o funciona. Eu fiz testes com
\&\f(CW\*(C`ActivePerl 5.6.1 Build 632\*(C'\fR, utilizando \f(CW\*(C`Windows 98\*(C'\fR, \f(CW\*(C`Windows 98 SE\*(C'\fR
e \f(CW\*(C`Windows XP Professional\*(C'\fR.
O primeiro e o terceiro na\*~o apresentaram falhas, o segundo apresentou raramente. Mas
na minha opinia\*~o pessoal, eu na\*~o confiaria em \fBnada\fR feito pela \fIMicro$oft\fR.
Na\*~o confiaria nem nos softwares livres rodando em cima de produtos da
\&\fIMicro$oft\fR. Portando, aqui vai uma dica que vai te livrar de muitos problemas:
\&\fBuse Linux\fR.
.IP "\(bu" 4
tolera\*^ncia a\*` falhas humanas
.Sp
O mi\*'nimo esperado do usua\*'rio e\*' que passe para\*^metros corretos; na\*~o passe
string onde um nu\*'mero e\*' esperado e nem passe expressa\*~o regular onde era
para po\*^r refere\*^ncia ao co\*'digo...
.Sp
Ainda assim, fiz o necessa\*'rio para proteger o usua\*'rio contra dar um
\&\f(CW\*(C`logout\*(C'\fR antes que seja feito um \f(CW\*(C`login\*(C'\fR, portanto na\*~o se desanime.
.IP "\(bu" 4
utilizar um proxy \s-1HTTP\s0
.Sp
Grande maioria dos proxies pu\*'blicos (os normalmente utilizados para anonimizar
acessos) na\*~o deixa conectar nas portas na\*~o\-HTTP. \fBNenhuma\fR das salas de bate-papo
reside na porta \s-1HTTP\s0 (80). E enta\*~o?
.PP
Outra coisa... Olha a data desse arquivo. \fBNessa\fR data \f(CW\*(C`UOLbot\*(C'\fR estava
funcionando, pode ter certeza. Se na\*~o esta\*' agora, e\*' porque pessoal do \s-1UOL\s0
alterou o sistema de webchat. Sinto muiti\*'ssimo... O que voce\*^ tem a fazer e\*'
ou procurar versa\*~o mais atual de \f(CW\*(C`UOLbot\*(C'\fR ou adaptar o co\*'digo desse aqui.
Na\*~o deve ser difi\*'cil, fiz co\*'digo o mais claro e limpo que pude, ate\*' comentei
tudo (o\*^o\*^o\*^)!
.PP
O mesmo se aplica a qualquer valor ou tabela citados aqui. O \s-1UOL\s0 muda
constantemente o seu sistema de webchat, fazer o que\*^...
.SH "REFERE\*^NCIAS"
.IX Header "REFERE^NCIAS"
.IP "\(bu" 4
\&\s-1LWP\s0 \- Library for \s-1WWW\s0 access in Perl
.PP
Va\*'rios exemplos distribui\*'dos junto com o mo\*'dulo:
.IP "\fIsimples.pl\fR" 4
.IX Item "simples.pl"
a aplicac\*,a\*~o mais simples; listar um sub-grupo, entrar na sala #15,
repetir mensagem 5 vezes, sair.
.IP "\fIcrawler.pl\fR" 4
.IX Item "crawler.pl"
bot de propaganda; entra em todas as salas nos sub-grupos especificados
e deixa uma mensagem.
.IP "\fIlist.pl\fR" 4
.IX Item "list.pl"
busca em sub-grupos especificados e retorna lista de URLs de salas
de bate-papo e seus respectivos ti\*'tulos.
.SH "VERSA\*~O"
.IX Header "VERSA~O"
2.02
.SH "HISTO\*'RICO"
.IX Header "HISTO'RICO"
.IP "\(bu" 4
\&\fB1.0\fR \fI(25/Jan/2002)\fR \- primeira versa\*~o funcional.
.IP "\(bu" 4
\&\fB1.1\fR \fI(09/Fev/2002)\fR \- utilizado o \f(CW\*(C`Carp::croak\*(C'\fR para erros de usua\*'rio e
adicionado o me\*'todo \f(CW\*(C`brief\*(C'\fR. Correc\*,o\*~es menores na documentac\*,a\*~o.
.IP "\(bu" 4
\&\fB1.2\fR \fI(03/Mar/2002)\fR \- adicionados me\*'todos \f(CW\*(C`auth\*(C'\fR e \f(CW\*(C`avatar\*(C'\fR (para tirar
proveito de ser usua\*'rio registrado do \s-1UOL\s0 ;).
.IP "\(bu" 4
\&\fB1.2a\fR \fI(04/Mar/2002)\fR \- atualizac\*,o\*~es na documentac\*,a\*~o.
.IP "\(bu" 4
\&\fB1.3\fR \fI(27/Mar/2002)\fR \- reestruturado o processo de login devido a\*`s alterac\*,o\*~es
feitas nos servidores do \s-1UOL\s0. Agora voce\*^ deve dar um \f(CW\*(C`join\*(C'\fR na sala escolhida,
obter o co\*'digo de verificac\*,a\*~o e completar operac\*,a\*~o com \f(CW\*(C`login\*(C'\fR. Maldic\*,a\*~o!
.IP "\(bu" 4
\&\fB1.4\fR \fI(22/Jul/2002)\fR \- Co\*'digo levemente reestruturado para compatibilidade com
mo\*'dulo \fI\s-1OCR\s0\fR (para reconhecimento do co\*'digo de verificac\*,a\*~o) que estou fazendo.
Algumas correc\*,o\*~es menores tambe\*'m.
.IP "\(bu" 4
\&\fB2.0\fR \fI(04/Ago/2002)\fR \- Co\*'digo fortemente reestruturado. Muitas mudanc\*,as.
Mo\*'dulo \f(CW\*(C`UOL::OCR\*(C'\fR inclui\*'do.
.IP "\(bu" 4
\&\fB2.01\fR \fI(06/Dez/2002)\fR \- Correc\*,a\*~o menor devido a\*` atualizac\*,a\*~o de protocolo nos servidores do \s-1UOL\s0.
.IP "\(bu" 4
\&\fB2.02\fR \fI(25/Mai/2003)\fR \- Arrumado o repentinamente surgido problema com \*(L"trailers\*(R" de linha. Agora esta\*' 100% \s-1IE\s0 :).
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 1
\&  Copyright (C) por Stanislaw Y. Pusep, Janeiro de 2002
.Ve
.IP "1." 4
A utilizac\*,a\*~o desse \fImo\*'dulo\fR, assim como distribuic\*,a\*~o do \fImo\*'dulo\fR e/ou
suas \fIverso\*~es\fR (alterac\*,o\*~es feitas no \fImo\*'dulo\fR por terceiros) somente
deve ser feita com autorizac\*,a\*~o explicita proveniente do \fIautor\fR.
.IP "2." 4
Aqueles que tem co\*'pia autorizada do \fImo\*'dulo\fR tem o direito de gerar
\&\fIverso\*~es\fR (alterar o \fImo\*'dulo\fR conforme for conveniente a eles). \fB\f(CB\*(C`(*)\*(C'\fB\fR
.IP "3." 4
Qualquer programa feito com utilizac\*,a\*~o desse \fImo\*'dulo\fR pode ser usado
para quaisquer fins (inclusive lucrativos). \fB\f(CB\*(C`(*)\*(C'\fB\fR
.ie n .IP "\fB\fB""(*)""\fB\fR" 4
.el .IP "\fB\f(CB(*)\fB\fR" 4
.IX Item "(*)"
Desde que na\*~o haja infrac\*,a\*~o do \f(CW\*(C`item 1\*(C'\fR.
.SH "AUTOR"
.IX Header "AUTOR"
Nome: Stanislaw Y. Pusep
.PP
E\-Mail: stanis \fI\s-1AT\s0\fR linuxmail \fI\s-1DOT\s0\fR org
.PP
Homepage: http://sysdlabs.hypermart.net/
